@page "/file/client-transactions/{ClientId:guid}"

@inject BasePage BasePage

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Income</MudText>
                    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Success">@totalIncome.ToString("C")</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Expense</MudText>
                    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Error">@totalExpense.ToString("C")</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6" Align="Align.Center">Balance</MudText>
                    <MudText Typo="Typo.h4" Align="Align.Center" Color="@(balance >= 0 ? Color.Success : Color.Error)">@balance.ToString("C")</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudToolBar DisableGutters="true" Class="mt-4">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
            OnClick="@OpenCreateDialog"
            Color="Color.Primary"
            Variant="Variant.Filled">
                New Transaction
            </MudButton>
            <MudSpacer />
            <MudDatePicker Date="@startDate"
            DateChanged="@(value => startDate = value ?? DateTime.Today.AddMonths(-1))"
            Label="Start Date" />
            <MudDatePicker Date="@endDate"
            DateChanged="@(value => endDate = value ?? DateTime.Today)"
            Label="End Date"
            Class="ml-2" />
            <MudButton OnClick="@FilterByDate" Color="Color.Primary" Class="ml-2">Filter</MudButton>
        </MudToolBar>

        <MudDataGrid T="ClientTransaction" Items="@transactions"
        Dense="true"
        Hover="true"
        Striped="true"
        Loading="@isLoading">
            <Columns>
                <PropertyColumn Property="x => x.TransactionDate" Title="Date" FormatString="dd/MM/yyyy" />
                <PropertyColumn Property="x => x.TransactionType" Title="Type">
                    <CellTemplate>
                        <MudChip Color="@(context.Item.TransactionType == TransactionType.Income ? Color.Success : Color.Error)"
                        Size="Size.Small">
                            @context.Item.TransactionType
                        </MudChip>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Category" Title="Category" />
                <PropertyColumn Property="x => x.Amount" Title="Amount" FormatString="C" />
                <PropertyColumn Property="x => x.Description" Title="Description" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudTooltip Text="Edit">
                            <MudIconButton Size="@Size.Small"
                            Icon="@Icons.Material.Outlined.Edit"
                            OnClick="@(() => OpenEditDialog(context.Item))"
                            Color="Color.Primary" />
                        </MudTooltip>
                        <MudTooltip Text="Delete">
                            <MudIconButton Size="@Size.Small"
                            Icon="@Icons.Material.Outlined.Delete"
                            OnClick="@(() => DeleteTransaction(context.Item))"
                            Color="Color.Error" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ClientTransaction" />
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public Guid ClientId { get; set; }

    private IEnumerable<ClientTransaction> transactions;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal balance;
    private bool isLoading;
    private DateTime startDate = DateTime.Today.AddMonths(-1);
    private DateTime endDate = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {            
            // transactions = await BasePage.ClientTransactionService.GetAllAsync(ClientId);
            // totalIncome = await BasePage.ClientTransactionService.GetTotalIncomeAsync(ClientId);
            // totalExpense = await BasePage.ClientTransactionService.GetTotalExpenseAsync(ClientId);
            // balance = await BasePage.ClientTransactionService.GetBalanceAsync(ClientId);
        }
        catch (Exception ex)
        {
            BasePage.Snackbar.Add("Error loading data: " + ex.Message, Severity.Error);
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { "ClientId", ClientId }
        };

        var dialog = await BasePage.DialogService.ShowAsync<ClientTransactionDialog>("New Transaction", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            BasePage.Snackbar.Add("Transaction created successfully", Severity.Success);
        }
    }

    private async Task OpenEditDialog(ClientTransaction transaction)
    {
        var parameters = new DialogParameters
        {
            { "Transaction", transaction }
        };

        var dialog = await BasePage.DialogService.ShowAsync<ClientTransactionDialog>("Edit Transaction", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            BasePage.Snackbar.Add("Transaction updated successfully", Severity.Success);
        }
    }

    private async Task DeleteTransaction(ClientTransaction transaction)
    {
        var confirm = await BasePage.DialogService.ShowMessageBox(
            "Delete Confirmation",
            "Are you sure you want to delete this transaction?",
            "Yes",
            "No",
            options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall });

        if (confirm == true)
        {
            try
            {
                //await BasePage.ClientTransactionService.DeleteAsync(transaction.Id, userEmail);
                await LoadData();
                BasePage.Snackbar.Add("Transaction deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                BasePage.Snackbar.Add("Error deleting transaction: " + ex.Message, Severity.Error);
            }
        }
    }

    private async Task FilterByDate()
    {
        try
        {
            isLoading = true;
            //transactions = await BasePage.ClientTransactionService.GetByDateRangeAsync(ClientId, startDate, endDate);
            totalIncome = transactions.Where(t => t.TransactionType == TransactionType.Income).Sum(t => t.Amount);
            totalExpense = transactions.Where(t => t.TransactionType == TransactionType.Expense).Sum(t => t.Amount);
            balance = totalIncome - totalExpense;
        }
        catch (Exception ex)
        {
            BasePage.Snackbar.Add("Error filtering data: " + ex.Message, Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
} 