@inject BasePage BasePage

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Primary">
            @(meetingModel.Id == Guid.Empty ? "New Meeting" : "Edit Meeting")
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudForm Model="meetingModel" @ref="form" Validation="@(async () => await ValidateInput())">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-end">
                    <MudText>Is Active?</MudText>
                    <MudSwitch T="bool"
                               Color="Color.Primary"
                               @bind-Value="meetingModel.IsActive" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText>Meeting Type</MudText>
                    <MudRadioGroup T="string" @bind-Value="meetingModel.MeetingType" Label="Meeting Type">
                        <MudRadio T="string" Value="@("InPerson")">In Person</MudRadio>
                        <MudRadio T="string" Value="@("Zoom")">Zoom</MudRadio>
                        <MudRadio T="string" Value="@("Phone")">Phone</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText>Meeting Date</MudText>
                    <MudDatePicker @bind-Value="meetingModel.MeetingDate"
                                   Required="true"
                                   RequiredError="Meeting date is required"
                                   Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText>Reminder Date</MudText>
                    <MudDatePicker @bind-Value="meetingModel.ReminderDate"
                                   Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText>Related Contact</MudText>
                    <MudTextField @bind-Value="meetingModel.RelatedContactId"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudText>Topics</MudText>
                    <MudTextField @bind-Value="meetingModel.Topics"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudText>Result</MudText>
                    <MudTextField @bind-Value="meetingModel.Result"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudText>Notes</MudText>
                    <MudTextField @bind-Value="meetingModel.Notes"
                                  Lines="3"
                                  Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@isLoading">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public MeetingModel? Meeting { get; set; }

    private MeetingModel meetingModel = new();
    private MudForm? form;
    private bool isLoading;
    private string userEmail = string.Empty;
    private Guid organisationId = Guid.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        // userEmail = await BasePage.SessionService.GetUserEmailAsync();
        // organisationId = await BasePage.SessionService.GetOrganisationIdAsync();
        if (Meeting != null)
        {
            meetingModel = new MeetingModel
                {
                    Id = Meeting.Id,
                    OrganisationId = Meeting.OrganisationId,
                    MeetingType = Meeting.MeetingType,
                    RelatedContactId = Meeting.RelatedContactId,
                    MeetingDate = Meeting.MeetingDate,
                    ReminderDate = Meeting.ReminderDate,
                    Topics = Meeting.Topics,
                    Result = Meeting.Result,
                    Notes = Meeting.Notes,
                    IsActive = Meeting.IsActive
                };
        }
        else
        {
            meetingModel = new MeetingModel
                {
                    OrganisationId = organisationId,
                    IsActive = true
                };
        }

        await Task.CompletedTask;
        StateHasChanged();
    }

    // Form doğrulama
    private async Task ValidateInput()
    {
        await form!.Validate();
    }

    // Dialogı iptal etme
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    // Formu gönderme
    private async Task Submit()
    {
        await ValidateInput();
        if (form!.IsValid)
        {
            isLoading = true;
            try
            {
                if (meetingModel.Id == Guid.Empty)
                {
                    meetingModel.Id = Guid.NewGuid();
                    meetingModel.CreationDate = DateTime.UtcNow;
                    meetingModel.CreatedBy = userEmail;
                    //response = await BasePage.MeetingService.CreateAsync(meetingModel);
                }
                else
                {
                    meetingModel.ModifiedBy = userEmail;
                    meetingModel.ModificationDate = DateTime.UtcNow;

                    //response = await BasePage.MeetingService.UpdateAsync(meetingModel);
                }
                
                MudDialog.Close(DialogResult.Ok(meetingModel));
            }
            finally
            {
                isLoading = false; // Yükleniyor durumunu kapatıyoruz.
            }
        }
    }
}
