@page "/Account/change-password"

@inject BasePage BasePage

@if (loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
    
    @if (organisationId == Guid.Empty)
    {
        <MudText>This page shows full content only to logged-in users. Please log in to access the full content. Membership is free.</MudText>
        <MudLink OnClick="@(() => BasePage.RegisterPage())" Underline="Underline.None" Color="Color.Primary">
            Register Here
        </MudLink>
    }
    else
    {
        <MudCard Elevation="3" Class="rounded-lg" Style="width: 100%; max-width: 500px;">
            <MudCardHeader Style="background-color: var(--mud-palette-primary);">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Style="color: white">Change Password</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pa-7">
                <EditForm Model="@model" OnValidSubmit="ChangePasswordAsync">
                    <DataAnnotationsValidator />
                    <MudStack Spacing="4">
                        <MudTextField @bind-Value="model.CurrentPassword"
                        Label="Current Password"
                        Variant="Variant.Outlined"
                        InputType="@(showCurrent ? InputType.Text : InputType.Password)"
                        Adornment="Adornment.End"
                        AdornmentIcon="@(showCurrent ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                        OnAdornmentClick="() => showCurrent = !showCurrent"
                        For="@(() => model.CurrentPassword)" />

                        <MudTextField @bind-Value="model.NewPassword"
                        Label="New Password"
                        Variant="Variant.Outlined"
                        InputType="@(showNew ? InputType.Text : InputType.Password)"
                        Adornment="Adornment.End"
                        AdornmentIcon="@(showNew ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                        OnAdornmentClick="() => showNew = !showNew"
                        For="@(() => model.NewPassword)" />

                        <MudTextField @bind-Value="model.ConfirmPassword"
                        Label="Confirm New Password"
                        Variant="Variant.Outlined"
                        InputType="@(showConfirm ? InputType.Text : InputType.Password)"
                        Adornment="Adornment.End"
                        AdornmentIcon="@(showConfirm ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                        OnAdornmentClick="() => showConfirm = !showConfirm"
                        For="@(() => model.ConfirmPassword)" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="my-2">@errorMessage</MudAlert>
                        }

                        <div class="d-flex justify-space-between align-center mt-6">
                            <MudButton OnClick="@(() => BasePage.NavigationManager.NavigateTo("/Account/Profile"))"
                            Variant="Variant.Outlined"
                            Color="Color.Default">
                                Cancel
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled"
                            Color="Color.Info"
                            Size="Size.Large" Disabled="disable">
                                Update Password
                            </MudButton>
                        </div>
                    </MudStack>
                </EditForm>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {

    private ChangePasswordModel model = new();
    private string errorMessage;
    private bool showCurrent;
    private bool showNew;
    private bool showConfirm;
    Guid userId = Guid.Empty;
    Guid organisationId = Guid.Empty;
    private string userEmail = string.Empty;
    private bool loading = true;
    private bool disable = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
       
        loading = true;
        // userId = await BasePage.SessionService.GetUserIdAsync();
        // organisationId = await BasePage.SessionService.GetOrganisationIdAsync();
        // userEmail = await BasePage.SessionService.GetUserEmailAsync();
        disable = userEmail == "demo@mylolaw.work";
        loading = false;
        StateHasChanged();
    }

    private async Task ChangePasswordAsync(EditContext context)
    {
        try
        {
            errorMessage = null;

            // // Mevcut şifreyi kontrol et
            // var currentPasswordEncrypted = Cryptology.EncryptAES(model.CurrentPassword);
            // var user = await BasePage.UserService.GetAsync(organisationId, userId);

            // if (user.Password != currentPasswordEncrypted)
            // {
            //     errorMessage = "Current password is incorrect";
            //     return;
            // }

            // // Yeni şifreyi güncelle
            // user.Password = Cryptology.EncryptAES(model.NewPassword);
            // user.ModifiedBy = user.Email;
            // await BasePage.UserService.UpdateAsync(user);

            BasePage.Snackbar.Add("Password updated successfully!", Severity.Success);
            BasePage.NavigationManager.NavigateTo("/Account/Profile");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
