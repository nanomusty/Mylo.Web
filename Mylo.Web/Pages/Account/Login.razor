@page "/Account/Login"
@using Mylo.Web.ObjectModels
@using System.Text.Json

@layout EmptyLayout

@inject BasePage BasePage
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject SessionInfo SessionInfo

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh; padding: 16px;">
    <MudCard Elevation="25" Class="rounded-lg pa-4" Style="width: 100%; max-width: 500px;">
        <MudCardHeader Style="background-color: var(--mud-palette-primary);" Class="rounded-t-lg">
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="color: white">Welcome Back</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent Class="pa-4">
            <!-- Demo account info alert -->
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-4">
                <MudText Typo="Typo.subtitle1">
                    🔐 <b>Demo Account:</b> demo@mylolaw.work<br />
                    🔑 <b>Password:</b> Demo12345
                </MudText>
                <MudText Typo="Typo.body2" Class="mt-2">
                    This is a public demo account and <b>not a real user</b>. For full access, please create your own free account.<br />
                    ⚠️ Demo data may be deleted anytime.<br />
                    ⚠️ Everyone can see the information you enter in demo mode.
                </MudText>
            </MudAlert>

            @if (!string.IsNullOrWhiteSpace(message))
            {
                <MudAlert Severity="Severity.Error" Class="my-2">@message</MudAlert>
            }

            <EditForm Model="Input" OnValidSubmit="LoginProcess">
                <DataAnnotationsValidator />
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="Input.Email"
                    Label="Email"
                    Variant="Variant.Outlined"
                    InputType="InputType.Email"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Email"
                    Size="Size.Large"
                    Class="mt-3" />
                    <ValidationMessage For="() => Input.Email" />

                    <MudTextField @bind-Value="Input.Password"
                    Label="Password"
                    Variant="Variant.Outlined"
                    InputType="InputType.Password"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Lock"
                    Size="Size.Large"
                    Class="mt-3" />
                    <ValidationMessage For="() => Input.Password" />

                    @if (!HostEnvironment.IsDevelopment())
                    {
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.body1" Class="text-center">Please enter the captcha code</MudText>
                            <MudStack Direction="Direction.Row" Justify="Justify.Center" Spacing="2">
                                <MudTextField @bind-Value="enteredCaptcha"
                                Label="Captcha"
                                Variant="Variant.Outlined"
                                InputType="InputType.Text"
                                Size="Size.Large"
                                Class="mt-3"
                                Style="width: 200px;" />
                                <MudButton OnClick="GenerateNewCaptcha"
                                Variant="Variant.Outlined"
                                Color="Color.Primary"
                                Size="Size.Large"
                                Class="mt-3">
                                    <MudIcon Icon="@Icons.Material.Filled.Refresh" />
                                </MudButton>
                            </MudStack>
                            <MudText Typo="Typo.h6" Class="text-center" Style="letter-spacing: 5px;">@captchaCode</MudText>
                        </MudStack>
                    }

                    <MudButton ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    FullWidth="true"
                    Class="mt-6">
                        Sign In
                    </MudButton>
                </MudStack>
            </EditForm>

        </MudCardContent>

        <MudCardActions Class="d-flex justify-center pa-2">
            <MudLink OnClick="@(() => BasePage.RegisterPage())"
            Underline="Underline.None"
            Color="Color.Primary">
                Register
            </MudLink>

            <MudSpacer />

            <MudLink Href="Account/ForgotPassword"
            Underline="Underline.None"
            Color="Color.Primary">
                Forgot your password?
            </MudLink>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private User Input { get; set; } = new();
    string message = "";
    private string captchaCode = "";
    private string enteredCaptcha = "";
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SessionInfo.ClearSession();

            if (!HostEnvironment.IsDevelopment())
            {
                GenerateNewCaptcha();
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }

        await Task.CompletedTask;
    }

    private void GenerateNewCaptcha()
    {
        captchaCode = random.Next(100000, 999999).ToString();
        enteredCaptcha = "";
    }

    protected async Task LoginProcess(EditContext editContext)
    {
        if (editContext.Validate())
        {
            if (!HostEnvironment.IsDevelopment() && enteredCaptcha != captchaCode)
            {
                message = "Invalid captcha code";
                GenerateNewCaptcha();
                StateHasChanged();
                return;
            }

            var data = new LoginRequest
                {
                    Email = Input.Email,
                    Password = Input.Password
                };

            var LoginResponse = await BasePage.PostApiAsync<LoginResponse>("api/Auth/login", data);

            if (LoginResponse is not null)
            {
                await localStorage.SetItemAsync("authToken", LoginResponse.Token);

                await SessionInfo.LoadSessionFromLocalStorage();

                await SessionInfo.IsAuthenticatedAsync();
            }

            if (!string.IsNullOrEmpty(LoginResponse?.Token))
            {
                //TODO: mail sending

                StateHasChanged();

                BasePage.NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                message = "User not exist or wrong email/password";
                if (!HostEnvironment.IsDevelopment())
                {
                    GenerateNewCaptcha();
                }
                StateHasChanged();
            }
        }


        await Task.CompletedTask;
    }
}
