@page "/file/debtors"
@implements IDisposable
@inject BasePage BasePage
@inject SessionInfo SessionInfo

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    @if (SessionInfo.OrganisationId == Guid.Empty)
    {
        <MudText>This page shows full content only to logged-in users. Please log in to access the full content. Membership is free.</MudText>
        <MudLink OnClick="@(() => BasePage.RegisterPage())" Underline="Underline.None" Color="Color.Primary">
            Register Here
        </MudLink>
    }
    else
    {
        <MudPaper Elevation="0" Class="pa-4">

            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Debtors</MudText>
                </MudItem>
                <MudItem xs="12" sm="6" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="OpenCreateDialog">
                        New Debtor
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudDataGrid T="DebtorModel" Items="@debtors"
                         Dense="true"
                         Hover="true"
                         Striped="true"
                         Bordered="true"
                         Loading="@loading"
                         Filterable="true"
                         Sortable="true"
                         LoadingProgressColor="Color.Primary">

                <Header>
                    <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="Refresh"
                               Color="Color.Primary"
                               Style="margin: 8px;">
                        Refresh
                    </MudButton>
                </Header>

                <Columns>
                    <PropertyColumn Property="x => x.FullName" Title="Name" />
                    <TemplateColumn Title="Contact" Sortable="false" Filterable="false">
                        <CellTemplate>
                            <MudStack>
                                <MudText>@context.Item.Email</MudText>
                                <MudText>@context.Item.PhoneNumber</MudText>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.CompanyName" Title="Company" />
                    <TemplateColumn Title="Identity / Tax No" Sortable="false" Filterable="false">
                        <CellTemplate>
                            <MudText>@context.Item.IdentityNumber</MudText>
                            <MudText>@context.Item.TaxNumber</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.IsActive" Title="Status">
                        <CellTemplate>
                            <MudChip Color="@(context.Item.IsActive ? Color.Success : Color.Error)"
                                     Size="Size.Small">
                                @(context.Item.IsActive ? "Active" : "Passive")
                            </MudChip>
                        </CellTemplate>
                    </PropertyColumn>
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudTooltip Text="View Details">
                                <MudIconButton Size="@Size.Small"
                                               Icon="@Icons.Material.Outlined.Info"
                                               OnClick="() => Info(context.Item)"
                                               Color="Color.Info" />
                            </MudTooltip>
                            <MudTooltip Text="Edit">
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                               Size="Size.Small"
                                               Color="Color.Primary"
                                               OnClick="@(() => OpenEditDialog(context.Item))" />
                            </MudTooltip>
                            <MudTooltip Text="Delete">
                                <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                               Size="Size.Small"
                                               Color="Color.Error"
                                               OnClick="@(() => DeleteDebtor(context.Item))" />
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="DebtorModel" />
                </PagerContent>
            </MudDataGrid>

        </MudPaper>
    }
</MudContainer>

@code {
    private List<DebtorModel> debtors = new();
    private bool loading = true;
    private string searchString = "";
    private bool selectedStatus = true;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await LoadDebtors();
        loading = false;
    }

    private async Task LoadDebtors()
    {
        try
        {
            debtors = await BasePage.GetAllApiAsync<List<DebtorModel>>($"Debtor/get-all?OrganisationId={SessionInfo.OrganisationId}");
        }
        catch (Exception ex)
        {
            BasePage.Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task Refresh()
    {
        loading = true;
        await LoadDebtors();
        loading = false;
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await BasePage.DialogService.ShowAsync<DebtorDialog>("New Debtor");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDebtors();
            BasePage.Snackbar.Add("Debtor added successfully.", Severity.Success);
        }
    }

    private async Task OpenEditDialog(DebtorModel debtor)
    {
        var parameters = new DialogParameters
        {
            { "Debtor", debtor }
        };

        var dialog = await BasePage.DialogService.ShowAsync<DebtorDialog>("Edit Debtor", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDebtors();
            BasePage.Snackbar.Add("Debtor updated successfully.", Severity.Success);
        }
    }

    private async Task DeleteDebtor(DebtorModel debtor)
    {
        var confirm = await BasePage.DialogService.ShowMessageBox(
            "Delete Confirmation",
            "Are you sure you want to delete this debtor?",
            "Yes",
            "No",
            options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall });

        if (confirm == true)
        {
            try
            {
                var data = new
                {
                    OrganisationId = SessionInfo.OrganisationId,
                    Id = debtor.Id,
                    DeletedBy = SessionInfo.UserEmail
                };

                await BasePage.DeleteApiAsync<DebtorModel>("Debtor/delete", data);
                await LoadDebtors();
                BasePage.Snackbar.Add("Debtor deleted successfully.", Severity.Success);
            }
            catch (Exception)
            {
                BasePage.Snackbar.Add("Error deleting debtor.", Severity.Error);
            }
        }
    }

    private async Task Info(DebtorModel model)
    {
        var lst = new List<DebtorModel>();
        lst.Add(model);

        var parameters = new DialogParameters<LogInfo> { { x => x.Entity, lst } };

        await BasePage.DialogService.ShowAsync<LogInfo>("Information", parameters);
    }

    public void Dispose()
    {
        debtors.Clear();
        debtors = null;
    }
}
