@page "/file/clients"

@inject BasePage BasePage
@inject SessionInfo SessionInfo
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    @if (SessionInfo.OrganisationId == Guid.Empty)
    {
        <MudText>This page shows full content only to logged-in users. Please log in to access the full content. Membership is free.</MudText>
        <MudLink OnClick="@(() => BasePage.RegisterPage())" Underline="Underline.None" Color="Color.Primary">
            Register Here
        </MudLink>
    }
    else
    {
        <MudPaper Elevation="0" Class="pa-4">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Clients</MudText>
                </MudItem>
                <MudItem xs="12" sm="6" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Add"
                    OnClick="OpenCreateDialog">
                        New Client
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudDataGrid T="ClientModel"
            Items="@clients"
            Hover="true"
            Bordered="true"
            Striped="true"
            Loading="@loading"
            LoadingProgressColor="Color.Primary"
            Filterable="true"
            Sortable="true"
            Dense="true"
            Class="mt-4">
                <Columns>
                    <PropertyColumn Property="@(c => c.FullName)" Title="Name / Company">
                        <CellTemplate Context="context">
                            <MudText>@(context.Item.ClientType == ClientType.Person ? context.Item.FullName : context.Item.CompanyName)</MudText>
                            @if (context.Item.ClientType == ClientType.Company)
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Item.FullName</MudText>
                            }
                        </CellTemplate>
                    </PropertyColumn>

                    <PropertyColumn Property="@(c => c.Email)" Title="Email" />
                    <PropertyColumn Property="@(c => c.Phone)" Title="Phone" />

                    <PropertyColumn Property="@(c => c.ClientType)" Title="Type">
                        <CellTemplate Context="context">
                            <MudChip Size="Size.Small"
                            Color="@(context.Item.ClientType == ClientType.Person ? Color.Info : Color.Success)">
                                @(context.Item.ClientType == ClientType.Person ? "Person" : "Company")
                            </MudChip>
                        </CellTemplate>
                    </PropertyColumn>

                    <PropertyColumn Property="@(c => c.IsActive)" Title="Status">
                        <CellTemplate Context="context">
                            <MudChip Size="Size.Small"
                            Color="@(context.Item.IsActive ? Color.Success : Color.Error)">
                                @(context.Item.IsActive ? "Active" : "Passive")
                            </MudChip>
                        </CellTemplate>
                    </PropertyColumn>

                    <PropertyColumn Property="@(c => c.CaseCount)" Title="Case Count">
                        <CellTemplate Context="context">
                            <MudBadge Content="@context.Item.CaseCount"
                            Color="Color.Primary"
                            Overlap="true"
                            Class="mx-6">
                                <MudIcon Icon="@Icons.Material.Filled.Gavel" />
                            </MudBadge>
                        </CellTemplate>
                    </PropertyColumn>

                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudTooltip Text="View Details">
                                <MudIconButton Size="@Size.Small"
                                Icon="@Icons.Material.Outlined.Info"
                                OnClick="() => Info(context.Item)"
                                Color="Color.Info" />
                            </MudTooltip>
                            <MudTooltip Text="Edit">
                                <MudIconButton Size="@Size.Small"
                                Icon="@Icons.Material.Outlined.Edit"
                                OnClick="() => OpenEditDialog(context.Item)"
                                Disabled="SessionInfo.UserType < UserType.Administrator"
                                Color="Color.Primary" />
                            </MudTooltip>
                            <MudTooltip Text="Delete">
                                <MudIconButton Size="@Size.Small"
                                Icon="@Icons.Material.Outlined.Delete"
                                OnClick="() => DeleteClient(context.Item)"
                                Disabled="SessionInfo.UserType < UserType.Administrator"
                                Color="Color.Error" />
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
    }
</MudContainer>

@code {

    private List<ClientModel> clients = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await LoadClients();
        loading = false;
    }

    private async Task LoadClients()
    {
        try
        {
            clients = await BasePage.GetAllApiAsync<List<ClientModel>>($"Client/get-all?OrganisationId={SessionInfo.OrganisationId}");
        }
        catch (Exception)
        {
            BasePage.Snackbar.Add("Error loading client list.", Severity.Error);
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await BasePage.DialogService.ShowAsync<ClientDialog>("New Client");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadClients();
            BasePage.Snackbar.Add("Client added successfully.", Severity.Success);
        }
    }

    private async Task OpenEditDialog(ClientModel client)
    {
        var parameters = new DialogParameters
        {
            { "Client", client }
        };

        var dialog = await BasePage.DialogService.ShowAsync<ClientDialog>("Edit Client", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadClients();
            BasePage.Snackbar.Add("Client updated successfully.", Severity.Success);
        }
    }

    private async Task DeleteClient(ClientModel client)
    {
        var confirm = await BasePage.DialogService.ShowMessageBox(
            "Delete Confirmation",
            "Are you sure you want to delete this client?",
            "Yes",
            "No",
            options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall });

        if (confirm == true)
        {
            var data = new
            {
                organisationId = SessionInfo.OrganisationId,
                id = client.Id,
                deletedBy = SessionInfo.UserEmail
            };

            try
            {
                await BasePage.DeleteApiAsync<ClientModel>("Client/delete", data);
                await LoadClients();
                BasePage.Snackbar.Add("Client deleted successfully.", Severity.Success);
            }
            catch (Exception)
            {
                BasePage.Snackbar.Add("Error deleting client.", Severity.Error);
            }
        }
    }

    private async Task Info(ClientModel clientModel)
    {
        var list = new List<ClientModel>();
        list.Add(clientModel);

        var parameters = new DialogParameters<LogInfo> { { x => x.Entity, list } };

        await BasePage.DialogService.ShowAsync<LogInfo>("Information", parameters);
    }

    public void Dispose()
    {
        clients.Clear();
        clients = null;
    }
} 